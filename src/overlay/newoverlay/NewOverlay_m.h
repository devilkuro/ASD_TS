//
// Generated file, do not edit! Created by opp_msgc 4.1 from overlay/newoverlay/NewOverlay.msg.
//

#ifndef _NEWOVERLAY_M_H_
#define _NEWOVERLAY_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <NodeHandle.h>
#include <CommonMessages_m.h>
#define TRANSPORTADDRESS_L (IPADDR_L + UDPPORT_L)

static const int NEWCOMMAND_L = 8;
static const int INT_L = 32;
static const int SIMTIME_L = 32;
static const int BOOL_L = 8;
static const int DOUBLE_L = 64;
static const int SHORT_L = 16;

#define NEWMESSAGE_L(msg) (BASEOVERLAY_L(msg) + NEWCOMMAND_L + TRANSPORTADDRESS_L + SIMTIME_L)
#define NEWQUERYMESSAGE_L(msg) (NEWMESSAGE_L(msg))
#define NEWQUERYRESPONSEMESSAGE_L(msg) (NEWMESSAGE_L(msg)\
		+(msg->getMembersArraySize() * TRANSPORTADDRESS_L))
#define NEWJOINEVALMESSAGE_L(msg) (NEWMESSAGE_L(msg))
#define NEWJOINEVALRESPONSEMESSAGE_L(msg) (NEWMESSAGE_L(msg)+INT_L\
		+(msg->getDataTimeStampArraySize() * SIMTIME_L)\
		+(msg->getParentNodeArraySize() * TRANSPORTADDRESS_L)\
		+(msg->getChildNodeArraySize() * TRANSPORTADDRESS_L)\
		+(msg->getChildDataSeqArraySize() * INT_L))
#define NEWJOINMESSAGE_L(msg) (NEWMESSAGE_L(msg)+INT_L)
#define NEWJOINRESPONSEMESSAGE_L(msg) (NEWMESSAGE_L(msg)+INT_L)
#define NEWINSERTQUERYMESSAGE_L(msg) (NEWMESSAGE_L(msg)+INT_L)
#define NEWINSERTQUERYRESPONSEMESSAGE_L(msg) (NEWMESSAGE_L(msg)+INT_L\
		+(msg->getChildNodeArraySize() * TRANSPORTADDRESS_L))
#define NEWINSERTEVALMESSAGE_L(msg) (NEWMESSAGE_L(msg)+INT_L)
#define NEWINSERTEVALRESPONSEMESSAGE_L(msg) (NEWMESSAGE_L(msg)+INT_L)
#define NEWINSERTMESSAGE_L(msg) (NEWMESSAGE_L(msg)+BOOL_L+INT_L+TRANSPORTADDRESS_L+INT_L)
#define NEWINSERTRESPONSEMESSAGE_L(msg) (NEWMESSAGE_L(msg)+BOOL_L+INT_L)
#define NEWJOINSUCCESSMESSAGE_L(msg) (NEWMESSAGE_L(msg))
#define NEWSTATISTICMESSAGE_L(msg) (NEWMESSAGE_L(msg)+INT_L+INT_L+SIMTIME_L)
// }}



/**
 * Enum generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * enum NEWCommand{
 *     NEW_QUERY = 0;
 *     NEW_QUERY_RESPONSE = 1;
 *     NEW_JOINEVAL = 2;
 *     NEW_JOINEVAL_RESPONSE = 3;
 *     NEW_JOIN = 4;
 *     NEW_JOIN_RESPONSE = 5;
 *     NEW_INSERT_QUERY = 6;
 *     NEW_INSERT_QUERY_RESPONSE = 7;
 *     NEW_INSERTEVAL = 8;
 *     NEW_INSERTEVAL_RESPONSE = 9;
 *     NEW_INSERT = 10;
 *     NEW_INSERT_RESPONSE = 11;
 *     NEW_JOIN_SUCCESS = 12;
 *     NEW_JOIN_STATISTIC = 13;
 * };
 * </pre>
 */
enum NEWCommand {
    NEW_QUERY = 0,
    NEW_QUERY_RESPONSE = 1,
    NEW_JOINEVAL = 2,
    NEW_JOINEVAL_RESPONSE = 3,
    NEW_JOIN = 4,
    NEW_JOIN_RESPONSE = 5,
    NEW_INSERT_QUERY = 6,
    NEW_INSERT_QUERY_RESPONSE = 7,
    NEW_INSERTEVAL = 8,
    NEW_INSERTEVAL_RESPONSE = 9,
    NEW_INSERT = 10,
    NEW_INSERT_RESPONSE = 11,
    NEW_JOIN_SUCCESS = 12,
    NEW_JOIN_STATISTIC = 13
};

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewMessage extends BaseOverlayMessage{
 *     
 *     int command enum(NEWCommand);
 *     
 *     TransportAddress srcNode;
 *     
 *     simtime_t sentTime;
 * }
 * </pre>
 */
class NewMessage : public ::BaseOverlayMessage
{
  protected:
    int command_var;
    ::TransportAddress srcNode_var;
    simtime_t sentTime_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewMessage&);

  public:
    NewMessage(const char *name=NULL, int kind=0);
    NewMessage(const NewMessage& other);
    virtual ~NewMessage();
    NewMessage& operator=(const NewMessage& other);
    virtual NewMessage *dup() const {return new NewMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getCommand() const;
    virtual void setCommand(int command_var);
    virtual TransportAddress& getSrcNode();
    virtual const TransportAddress& getSrcNode() const {return const_cast<NewMessage*>(this)->getSrcNode();}
    virtual void setSrcNode(const TransportAddress& srcNode_var);
    virtual simtime_t getSentTime() const;
    virtual void setSentTime(simtime_t sentTime_var);
};

inline void doPacking(cCommBuffer *b, NewMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewQueryMessage extends NewMessage{
 * }
 * </pre>
 */
class NewQueryMessage : public ::NewMessage
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewQueryMessage&);

  public:
    NewQueryMessage(const char *name=NULL, int kind=0);
    NewQueryMessage(const NewQueryMessage& other);
    virtual ~NewQueryMessage();
    NewQueryMessage& operator=(const NewQueryMessage& other);
    virtual NewQueryMessage *dup() const {return new NewQueryMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, NewQueryMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewQueryMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewQueryResponseMessage extends NewMessage{
 *     
 *     
 *     TransportAddress members[];
 *     
 *     unsigned int freeDegree;
 * 	
 * 	
 * }
 * </pre>
 */
class NewQueryResponseMessage : public ::NewMessage
{
  protected:
    ::TransportAddress *members_var; // array ptr
    unsigned int members_arraysize;
    unsigned int freeDegree_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewQueryResponseMessage&);

  public:
    NewQueryResponseMessage(const char *name=NULL, int kind=0);
    NewQueryResponseMessage(const NewQueryResponseMessage& other);
    virtual ~NewQueryResponseMessage();
    NewQueryResponseMessage& operator=(const NewQueryResponseMessage& other);
    virtual NewQueryResponseMessage *dup() const {return new NewQueryResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setMembersArraySize(unsigned int size);
    virtual unsigned int getMembersArraySize() const;
    virtual TransportAddress& getMembers(unsigned int k);
    virtual const TransportAddress& getMembers(unsigned int k) const {return const_cast<NewQueryResponseMessage*>(this)->getMembers(k);}
    virtual void setMembers(unsigned int k, const TransportAddress& members_var);
    virtual unsigned int getFreeDegree() const;
    virtual void setFreeDegree(unsigned int freeDegree_var);
};

inline void doPacking(cCommBuffer *b, NewQueryResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewQueryResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewJoinEvalMessage extends NewMessage{
 * }
 * </pre>
 */
class NewJoinEvalMessage : public ::NewMessage
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewJoinEvalMessage&);

  public:
    NewJoinEvalMessage(const char *name=NULL, int kind=0);
    NewJoinEvalMessage(const NewJoinEvalMessage& other);
    virtual ~NewJoinEvalMessage();
    NewJoinEvalMessage& operator=(const NewJoinEvalMessage& other);
    virtual NewJoinEvalMessage *dup() const {return new NewJoinEvalMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, NewJoinEvalMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewJoinEvalMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewJoinEvalResponseMessage extends NewMessage{
 *     
 *     unsigned int freeDegree;
 *     
 *     
 *     simtime_t dataTimeStamp[];
 *     
 *     TransportAddress parentNode[];
 *     
 *     
 *     
 *     TransportAddress childNode[];
 *     unsigned int childDataSeq[];
 * }
 * </pre>
 */
class NewJoinEvalResponseMessage : public ::NewMessage
{
  protected:
    unsigned int freeDegree_var;
    simtime_t *dataTimeStamp_var; // array ptr
    unsigned int dataTimeStamp_arraysize;
    ::TransportAddress *parentNode_var; // array ptr
    unsigned int parentNode_arraysize;
    ::TransportAddress *childNode_var; // array ptr
    unsigned int childNode_arraysize;
    unsigned int *childDataSeq_var; // array ptr
    unsigned int childDataSeq_arraysize;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewJoinEvalResponseMessage&);

  public:
    NewJoinEvalResponseMessage(const char *name=NULL, int kind=0);
    NewJoinEvalResponseMessage(const NewJoinEvalResponseMessage& other);
    virtual ~NewJoinEvalResponseMessage();
    NewJoinEvalResponseMessage& operator=(const NewJoinEvalResponseMessage& other);
    virtual NewJoinEvalResponseMessage *dup() const {return new NewJoinEvalResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getFreeDegree() const;
    virtual void setFreeDegree(unsigned int freeDegree_var);
    virtual void setDataTimeStampArraySize(unsigned int size);
    virtual unsigned int getDataTimeStampArraySize() const;
    virtual simtime_t getDataTimeStamp(unsigned int k) const;
    virtual void setDataTimeStamp(unsigned int k, simtime_t dataTimeStamp_var);
    virtual void setParentNodeArraySize(unsigned int size);
    virtual unsigned int getParentNodeArraySize() const;
    virtual TransportAddress& getParentNode(unsigned int k);
    virtual const TransportAddress& getParentNode(unsigned int k) const {return const_cast<NewJoinEvalResponseMessage*>(this)->getParentNode(k);}
    virtual void setParentNode(unsigned int k, const TransportAddress& parentNode_var);
    virtual void setChildNodeArraySize(unsigned int size);
    virtual unsigned int getChildNodeArraySize() const;
    virtual TransportAddress& getChildNode(unsigned int k);
    virtual const TransportAddress& getChildNode(unsigned int k) const {return const_cast<NewJoinEvalResponseMessage*>(this)->getChildNode(k);}
    virtual void setChildNode(unsigned int k, const TransportAddress& childNode_var);
    virtual void setChildDataSeqArraySize(unsigned int size);
    virtual unsigned int getChildDataSeqArraySize() const;
    virtual unsigned int getChildDataSeq(unsigned int k) const;
    virtual void setChildDataSeq(unsigned int k, unsigned int childDataSeq_var);
};

inline void doPacking(cCommBuffer *b, NewJoinEvalResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewJoinEvalResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewJoinMessage extends NewMessage{
 *     
 *     unsigned int dataSeq;
 * }
 * </pre>
 */
class NewJoinMessage : public ::NewMessage
{
  protected:
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewJoinMessage&);

  public:
    NewJoinMessage(const char *name=NULL, int kind=0);
    NewJoinMessage(const NewJoinMessage& other);
    virtual ~NewJoinMessage();
    NewJoinMessage& operator=(const NewJoinMessage& other);
    virtual NewJoinMessage *dup() const {return new NewJoinMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, NewJoinMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewJoinMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewJoinResponseMessage extends NewMessage{
 *     
 *     unsigned int dataSeq;
 * }
 * </pre>
 */
class NewJoinResponseMessage : public ::NewMessage
{
  protected:
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewJoinResponseMessage&);

  public:
    NewJoinResponseMessage(const char *name=NULL, int kind=0);
    NewJoinResponseMessage(const NewJoinResponseMessage& other);
    virtual ~NewJoinResponseMessage();
    NewJoinResponseMessage& operator=(const NewJoinResponseMessage& other);
    virtual NewJoinResponseMessage *dup() const {return new NewJoinResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, NewJoinResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewJoinResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewInsertQueryMessage extends NewMessage{
 *     
 *     unsigned int dataSeq;
 * }
 * </pre>
 */
class NewInsertQueryMessage : public ::NewMessage
{
  protected:
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewInsertQueryMessage&);

  public:
    NewInsertQueryMessage(const char *name=NULL, int kind=0);
    NewInsertQueryMessage(const NewInsertQueryMessage& other);
    virtual ~NewInsertQueryMessage();
    NewInsertQueryMessage& operator=(const NewInsertQueryMessage& other);
    virtual NewInsertQueryMessage *dup() const {return new NewInsertQueryMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, NewInsertQueryMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewInsertQueryMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewInsertQueryResponseMessage extends NewMessage{
 *     
 *     unsigned int dataSeq;
 *     
 *     
 *     TransportAddress childNode[];
 * }
 * </pre>
 */
class NewInsertQueryResponseMessage : public ::NewMessage
{
  protected:
    unsigned int dataSeq_var;
    ::TransportAddress *childNode_var; // array ptr
    unsigned int childNode_arraysize;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewInsertQueryResponseMessage&);

  public:
    NewInsertQueryResponseMessage(const char *name=NULL, int kind=0);
    NewInsertQueryResponseMessage(const NewInsertQueryResponseMessage& other);
    virtual ~NewInsertQueryResponseMessage();
    NewInsertQueryResponseMessage& operator=(const NewInsertQueryResponseMessage& other);
    virtual NewInsertQueryResponseMessage *dup() const {return new NewInsertQueryResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
    virtual void setChildNodeArraySize(unsigned int size);
    virtual unsigned int getChildNodeArraySize() const;
    virtual TransportAddress& getChildNode(unsigned int k);
    virtual const TransportAddress& getChildNode(unsigned int k) const {return const_cast<NewInsertQueryResponseMessage*>(this)->getChildNode(k);}
    virtual void setChildNode(unsigned int k, const TransportAddress& childNode_var);
};

inline void doPacking(cCommBuffer *b, NewInsertQueryResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewInsertQueryResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewInsertEvalMessage extends NewMessage{
 *     
 *     unsigned int dataSeq;
 * }
 * </pre>
 */
class NewInsertEvalMessage : public ::NewMessage
{
  protected:
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewInsertEvalMessage&);

  public:
    NewInsertEvalMessage(const char *name=NULL, int kind=0);
    NewInsertEvalMessage(const NewInsertEvalMessage& other);
    virtual ~NewInsertEvalMessage();
    NewInsertEvalMessage& operator=(const NewInsertEvalMessage& other);
    virtual NewInsertEvalMessage *dup() const {return new NewInsertEvalMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, NewInsertEvalMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewInsertEvalMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewInsertEvalResponseMessage extends NewMessage{
 *     
 *     unsigned int dataSeq;
 * }
 * </pre>
 */
class NewInsertEvalResponseMessage : public ::NewMessage
{
  protected:
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewInsertEvalResponseMessage&);

  public:
    NewInsertEvalResponseMessage(const char *name=NULL, int kind=0);
    NewInsertEvalResponseMessage(const NewInsertEvalResponseMessage& other);
    virtual ~NewInsertEvalResponseMessage();
    NewInsertEvalResponseMessage& operator=(const NewInsertEvalResponseMessage& other);
    virtual NewInsertEvalResponseMessage *dup() const {return new NewInsertEvalResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, NewInsertEvalResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewInsertEvalResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewInsertMessage extends NewMessage{
 *     bool isChildNode;
 *     
 *     unsigned int dataSeq;
 *     
 *     TransportAddress selectedNode;
 *     unsigned int selectedDataSeq;
 * }
 * </pre>
 */
class NewInsertMessage : public ::NewMessage
{
  protected:
    bool isChildNode_var;
    unsigned int dataSeq_var;
    ::TransportAddress selectedNode_var;
    unsigned int selectedDataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewInsertMessage&);

  public:
    NewInsertMessage(const char *name=NULL, int kind=0);
    NewInsertMessage(const NewInsertMessage& other);
    virtual ~NewInsertMessage();
    NewInsertMessage& operator=(const NewInsertMessage& other);
    virtual NewInsertMessage *dup() const {return new NewInsertMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getIsChildNode() const;
    virtual void setIsChildNode(bool isChildNode_var);
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
    virtual TransportAddress& getSelectedNode();
    virtual const TransportAddress& getSelectedNode() const {return const_cast<NewInsertMessage*>(this)->getSelectedNode();}
    virtual void setSelectedNode(const TransportAddress& selectedNode_var);
    virtual unsigned int getSelectedDataSeq() const;
    virtual void setSelectedDataSeq(unsigned int selectedDataSeq_var);
};

inline void doPacking(cCommBuffer *b, NewInsertMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewInsertMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewInsertResponseMessage extends NewMessage{
 *     
 *     bool isChildNode;
 *     unsigned int dataSeq;
 * }
 * </pre>
 */
class NewInsertResponseMessage : public ::NewMessage
{
  protected:
    bool isChildNode_var;
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewInsertResponseMessage&);

  public:
    NewInsertResponseMessage(const char *name=NULL, int kind=0);
    NewInsertResponseMessage(const NewInsertResponseMessage& other);
    virtual ~NewInsertResponseMessage();
    NewInsertResponseMessage& operator=(const NewInsertResponseMessage& other);
    virtual NewInsertResponseMessage *dup() const {return new NewInsertResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getIsChildNode() const;
    virtual void setIsChildNode(bool isChildNode_var);
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, NewInsertResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewInsertResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewJoinSuccessMessage extends NewMessage{
 * }
 * </pre>
 */
class NewJoinSuccessMessage : public ::NewMessage
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewJoinSuccessMessage&);

  public:
    NewJoinSuccessMessage(const char *name=NULL, int kind=0);
    NewJoinSuccessMessage(const NewJoinSuccessMessage& other);
    virtual ~NewJoinSuccessMessage();
    NewJoinSuccessMessage& operator=(const NewJoinSuccessMessage& other);
    virtual NewJoinSuccessMessage *dup() const {return new NewJoinSuccessMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, NewJoinSuccessMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewJoinSuccessMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/newoverlay/NewOverlay.msg</tt> by opp_msgc.
 * <pre>
 * message NewStatisticMessage extends NewMessage{
 *     unsigned int dataSeq;
 *     unsigned int jumpNum;
 *     simtime_t dataTimeStamp;
 * }
 * </pre>
 */
class NewStatisticMessage : public ::NewMessage
{
  protected:
    unsigned int dataSeq_var;
    unsigned int jumpNum_var;
    simtime_t dataTimeStamp_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewStatisticMessage&);

  public:
    NewStatisticMessage(const char *name=NULL, int kind=0);
    NewStatisticMessage(const NewStatisticMessage& other);
    virtual ~NewStatisticMessage();
    NewStatisticMessage& operator=(const NewStatisticMessage& other);
    virtual NewStatisticMessage *dup() const {return new NewStatisticMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
    virtual unsigned int getJumpNum() const;
    virtual void setJumpNum(unsigned int jumpNum_var);
    virtual simtime_t getDataTimeStamp() const;
    virtual void setDataTimeStamp(simtime_t dataTimeStamp_var);
};

inline void doPacking(cCommBuffer *b, NewStatisticMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NewStatisticMessage& obj) {obj.parsimUnpack(b);}


#endif // _NEWOVERLAY_M_H_
