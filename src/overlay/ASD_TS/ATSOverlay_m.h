//
// Generated file, do not edit! Created by opp_msgc 4.1 from overlay/ASD_TS/ATSOverlay.msg.
//

#ifndef _ATSOVERLAY_M_H_
#define _ATSOVERLAY_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <TransportAddress.h>
#include <CommonMessages_m.h>

static const int ATSCOMMAND_L = 8;
static const int INT_L = 32;
static const int SIMTIME_L = 32;
static const int BOOL_L = 8;
static const int DOUBLE_L = 64;
static const int SHORT_L = 16;

#define TRANSPORTADDRESS_L (IPADDR_L + UDPPORT_L)

#define ATSMESSAGE_L(msg) (BASEOVERLAY_L(msg) + ATSCOMMAND_L + TRANSPORTADDRESS_L + SIMTIME_L)
#define ATSQUERYMESSAGE_L(msg) (ATSMESSAGE_L(msg))
#define ATSQUERYRESPONSEMESSAGE_L(msg) (ATSMESSAGE_L(msg)\
		+(msg->getMemberAddressArraySize() * TRANSPORTADDRESS_L)+INT_L)
#define ATSJOINEVALMESSAGE_L(msg) (ATSMESSAGE_L(msg))
#define ATSJOINEVALRESPONSEMESSAGE_L(msg) (ATSMESSAGE_L(msg)+INT_L\
		+(msg->getDataTimeStampArraySize() * SIMTIME_L)\
		+(msg->getParentAddressArraySize() * TRANSPORTADDRESS_L)\
		+(msg->getChildAddressArraySize() * TRANSPORTADDRESS_L)\
		+(msg->getChildDataSeqArraySize() * INT_L))
#define ATSJOINMESSAGE_L(msg) (ATSMESSAGE_L(msg)+INT_L)
#define ATSJOINRESPONSEMESSAGE_L(msg) (ATSMESSAGE_L(msg)+INT_L)
#define ATSINSERTMESSAGE_L(msg) (ATSMESSAGE_L(msg)+BOOL_L+INT_L+TRANSPORTADDRESS_L+INT_L)
#define ATSINSERTRESPONSEMESSAGE_L(msg) (ATSMESSAGE_L(msg)+BOOL_L+INT_L)
#define ATSJOINSUCCESSMESSAGE_L(msg) (ATSMESSAGE_L(msg))
#define ATSSTATISTICMESSAGE_L(msg) (ATSMESSAGE_L(msg)+INT_L+INT_L+SIMTIME_L)
// }}



/**
 * Enum generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * enum ATSCommand{
 *     ATS_NULL = 0;
 *     ATS_QUERY = 1;
 *     ATS_QUERY_RESPONSE = 2;
 *     ATS_JOINEVAL = 3;
 *     ATS_JOINEVAL_RESPONSE = 4;
 *     ATS_JOIN = 5;
 *     ATS_JOIN_RESPONSE = 6;
 *     ATS_INSERT = 7;
 *     ATS_INSERT_RESPONSE = 8;
 *     ATS_JOIN_SUCCESS = 9;
 *     ATS_STATISTIC = 10;
 * };
 * </pre>
 */
enum ATSCommand {
    ATS_NULL = 0,
    ATS_QUERY = 1,
    ATS_QUERY_RESPONSE = 2,
    ATS_JOINEVAL = 3,
    ATS_JOINEVAL_RESPONSE = 4,
    ATS_JOIN = 5,
    ATS_JOIN_RESPONSE = 6,
    ATS_INSERT = 7,
    ATS_INSERT_RESPONSE = 8,
    ATS_JOIN_SUCCESS = 9,
    ATS_STATISTIC = 10
};

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSMessage extends BaseOverlayMessage{
 *     
 *     int command = ATS_NULL @enum(ATSCommand);
 *     
 *     TransportAddress sourceAddress;
 *     
 *     double sendTime;
 * }
 * </pre>
 */
class ATSMessage : public ::BaseOverlayMessage
{
  protected:
    int command_var;
    ::TransportAddress sourceAddress_var;
    double sendTime_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSMessage&);

  public:
    ATSMessage(const char *name=NULL, int kind=0);
    ATSMessage(const ATSMessage& other);
    virtual ~ATSMessage();
    ATSMessage& operator=(const ATSMessage& other);
    virtual ATSMessage *dup() const {return new ATSMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getCommand() const;
    virtual void setCommand(int command_var);
    virtual TransportAddress& getSourceAddress();
    virtual const TransportAddress& getSourceAddress() const {return const_cast<ATSMessage*>(this)->getSourceAddress();}
    virtual void setSourceAddress(const TransportAddress& sourceAddress_var);
    virtual double getSendTime() const;
    virtual void setSendTime(double sendTime_var);
};

inline void doPacking(cCommBuffer *b, ATSMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSQueryMessage extends ATSMessage{
 *      command = ATS_QUERY;
 *  }
 * </pre>
 */
class ATSQueryMessage : public ::ATSMessage
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSQueryMessage&);

  public:
    ATSQueryMessage(const char *name=NULL, int kind=0);
    ATSQueryMessage(const ATSQueryMessage& other);
    virtual ~ATSQueryMessage();
    ATSQueryMessage& operator=(const ATSQueryMessage& other);
    virtual ATSQueryMessage *dup() const {return new ATSQueryMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, ATSQueryMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSQueryMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSQueryResponseMessage extends ATSMessage{
 *      command = ATS_QUERY_RESPONSE;
 *      TransportAddress memberAddress[];
 *      unsigned int freeDegree;
 *  }
 * </pre>
 */
class ATSQueryResponseMessage : public ::ATSMessage
{
  protected:
    ::TransportAddress *memberAddress_var; // array ptr
    unsigned int memberAddress_arraysize;
    unsigned int freeDegree_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSQueryResponseMessage&);

  public:
    ATSQueryResponseMessage(const char *name=NULL, int kind=0);
    ATSQueryResponseMessage(const ATSQueryResponseMessage& other);
    virtual ~ATSQueryResponseMessage();
    ATSQueryResponseMessage& operator=(const ATSQueryResponseMessage& other);
    virtual ATSQueryResponseMessage *dup() const {return new ATSQueryResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setMemberAddressArraySize(unsigned int size);
    virtual unsigned int getMemberAddressArraySize() const;
    virtual TransportAddress& getMemberAddress(unsigned int k);
    virtual const TransportAddress& getMemberAddress(unsigned int k) const {return const_cast<ATSQueryResponseMessage*>(this)->getMemberAddress(k);}
    virtual void setMemberAddress(unsigned int k, const TransportAddress& memberAddress_var);
    virtual unsigned int getFreeDegree() const;
    virtual void setFreeDegree(unsigned int freeDegree_var);
};

inline void doPacking(cCommBuffer *b, ATSQueryResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSQueryResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSJoinEvalMessage extends ATSMessage{
 *      command = ATS_JOINEVAL;
 *  }
 * </pre>
 */
class ATSJoinEvalMessage : public ::ATSMessage
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSJoinEvalMessage&);

  public:
    ATSJoinEvalMessage(const char *name=NULL, int kind=0);
    ATSJoinEvalMessage(const ATSJoinEvalMessage& other);
    virtual ~ATSJoinEvalMessage();
    ATSJoinEvalMessage& operator=(const ATSJoinEvalMessage& other);
    virtual ATSJoinEvalMessage *dup() const {return new ATSJoinEvalMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, ATSJoinEvalMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSJoinEvalMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSJoinEvalResponseMessage extends ATSMessage{
 *      command = ATS_JOINEVAL_RESPONSE;
 *      unsigned int freeDegree;
 *      double dataTimeStamp[];
 *      TransportAddress parentAddress[];
 *      TransportAddress childAddress[];
 *      unsigned int childDataSeq[];
 *  }
 * </pre>
 */
class ATSJoinEvalResponseMessage : public ::ATSMessage
{
  protected:
    unsigned int freeDegree_var;
    double *dataTimeStamp_var; // array ptr
    unsigned int dataTimeStamp_arraysize;
    ::TransportAddress *parentAddress_var; // array ptr
    unsigned int parentAddress_arraysize;
    ::TransportAddress *childAddress_var; // array ptr
    unsigned int childAddress_arraysize;
    unsigned int *childDataSeq_var; // array ptr
    unsigned int childDataSeq_arraysize;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSJoinEvalResponseMessage&);

  public:
    ATSJoinEvalResponseMessage(const char *name=NULL, int kind=0);
    ATSJoinEvalResponseMessage(const ATSJoinEvalResponseMessage& other);
    virtual ~ATSJoinEvalResponseMessage();
    ATSJoinEvalResponseMessage& operator=(const ATSJoinEvalResponseMessage& other);
    virtual ATSJoinEvalResponseMessage *dup() const {return new ATSJoinEvalResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getFreeDegree() const;
    virtual void setFreeDegree(unsigned int freeDegree_var);
    virtual void setDataTimeStampArraySize(unsigned int size);
    virtual unsigned int getDataTimeStampArraySize() const;
    virtual double getDataTimeStamp(unsigned int k) const;
    virtual void setDataTimeStamp(unsigned int k, double dataTimeStamp_var);
    virtual void setParentAddressArraySize(unsigned int size);
    virtual unsigned int getParentAddressArraySize() const;
    virtual TransportAddress& getParentAddress(unsigned int k);
    virtual const TransportAddress& getParentAddress(unsigned int k) const {return const_cast<ATSJoinEvalResponseMessage*>(this)->getParentAddress(k);}
    virtual void setParentAddress(unsigned int k, const TransportAddress& parentAddress_var);
    virtual void setChildAddressArraySize(unsigned int size);
    virtual unsigned int getChildAddressArraySize() const;
    virtual TransportAddress& getChildAddress(unsigned int k);
    virtual const TransportAddress& getChildAddress(unsigned int k) const {return const_cast<ATSJoinEvalResponseMessage*>(this)->getChildAddress(k);}
    virtual void setChildAddress(unsigned int k, const TransportAddress& childAddress_var);
    virtual void setChildDataSeqArraySize(unsigned int size);
    virtual unsigned int getChildDataSeqArraySize() const;
    virtual unsigned int getChildDataSeq(unsigned int k) const;
    virtual void setChildDataSeq(unsigned int k, unsigned int childDataSeq_var);
};

inline void doPacking(cCommBuffer *b, ATSJoinEvalResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSJoinEvalResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSJoinMessage extends ATSMessage{
 *      command = ATS_JOIN;
 *      unsigned int dataSeq;
 *  }
 * </pre>
 */
class ATSJoinMessage : public ::ATSMessage
{
  protected:
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSJoinMessage&);

  public:
    ATSJoinMessage(const char *name=NULL, int kind=0);
    ATSJoinMessage(const ATSJoinMessage& other);
    virtual ~ATSJoinMessage();
    ATSJoinMessage& operator=(const ATSJoinMessage& other);
    virtual ATSJoinMessage *dup() const {return new ATSJoinMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, ATSJoinMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSJoinMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSJoinResponseMessage extends ATSMessage{
 *      command = ATS_JOIN_RESPONSE;
 *      unsigned int dataSeq;
 *  }
 * </pre>
 */
class ATSJoinResponseMessage : public ::ATSMessage
{
  protected:
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSJoinResponseMessage&);

  public:
    ATSJoinResponseMessage(const char *name=NULL, int kind=0);
    ATSJoinResponseMessage(const ATSJoinResponseMessage& other);
    virtual ~ATSJoinResponseMessage();
    ATSJoinResponseMessage& operator=(const ATSJoinResponseMessage& other);
    virtual ATSJoinResponseMessage *dup() const {return new ATSJoinResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, ATSJoinResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSJoinResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSInsertMessage extends ATSMessage{
 *      command = ATS_INSERT;
 *      bool beChildNode;
 *      unsigned int dataSeq;
 *      TransportAddress selectedNodeAddress;
 *      unsigned int selectedDataSeq;
 *  }
 * </pre>
 */
class ATSInsertMessage : public ::ATSMessage
{
  protected:
    bool beChildNode_var;
    unsigned int dataSeq_var;
    ::TransportAddress selectedNodeAddress_var;
    unsigned int selectedDataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSInsertMessage&);

  public:
    ATSInsertMessage(const char *name=NULL, int kind=0);
    ATSInsertMessage(const ATSInsertMessage& other);
    virtual ~ATSInsertMessage();
    ATSInsertMessage& operator=(const ATSInsertMessage& other);
    virtual ATSInsertMessage *dup() const {return new ATSInsertMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getBeChildNode() const;
    virtual void setBeChildNode(bool beChildNode_var);
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
    virtual TransportAddress& getSelectedNodeAddress();
    virtual const TransportAddress& getSelectedNodeAddress() const {return const_cast<ATSInsertMessage*>(this)->getSelectedNodeAddress();}
    virtual void setSelectedNodeAddress(const TransportAddress& selectedNodeAddress_var);
    virtual unsigned int getSelectedDataSeq() const;
    virtual void setSelectedDataSeq(unsigned int selectedDataSeq_var);
};

inline void doPacking(cCommBuffer *b, ATSInsertMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSInsertMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSInsertResponseMessage extends ATSMessage{
 *      command = ATS_INSERT_RESPONSE;
 *      bool beChildNode;
 *      unsigned int dataSeq;
 *  }
 * </pre>
 */
class ATSInsertResponseMessage : public ::ATSMessage
{
  protected:
    bool beChildNode_var;
    unsigned int dataSeq_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSInsertResponseMessage&);

  public:
    ATSInsertResponseMessage(const char *name=NULL, int kind=0);
    ATSInsertResponseMessage(const ATSInsertResponseMessage& other);
    virtual ~ATSInsertResponseMessage();
    ATSInsertResponseMessage& operator=(const ATSInsertResponseMessage& other);
    virtual ATSInsertResponseMessage *dup() const {return new ATSInsertResponseMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual bool getBeChildNode() const;
    virtual void setBeChildNode(bool beChildNode_var);
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
};

inline void doPacking(cCommBuffer *b, ATSInsertResponseMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSInsertResponseMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSJoinSuccessMessage extends ATSMessage{
 *      command = ATS_JOIN_SUCCESS;
 *  }
 * </pre>
 */
class ATSJoinSuccessMessage : public ::ATSMessage
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSJoinSuccessMessage&);

  public:
    ATSJoinSuccessMessage(const char *name=NULL, int kind=0);
    ATSJoinSuccessMessage(const ATSJoinSuccessMessage& other);
    virtual ~ATSJoinSuccessMessage();
    ATSJoinSuccessMessage& operator=(const ATSJoinSuccessMessage& other);
    virtual ATSJoinSuccessMessage *dup() const {return new ATSJoinSuccessMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, ATSJoinSuccessMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSJoinSuccessMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>overlay/ASD_TS/ATSOverlay.msg</tt> by opp_msgc.
 * <pre>
 * packet ATSStatisticMessage extends ATSMessage{
 *      command = ATS_STATISTIC;
 *      double createTime;
 *      unsigned int dataSeq;
 *      unsigned int hop;
 *  }
 * </pre>
 */
class ATSStatisticMessage : public ::ATSMessage
{
  protected:
    double createTime_var;
    unsigned int dataSeq_var;
    unsigned int hop_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATSStatisticMessage&);

  public:
    ATSStatisticMessage(const char *name=NULL, int kind=0);
    ATSStatisticMessage(const ATSStatisticMessage& other);
    virtual ~ATSStatisticMessage();
    ATSStatisticMessage& operator=(const ATSStatisticMessage& other);
    virtual ATSStatisticMessage *dup() const {return new ATSStatisticMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getCreateTime() const;
    virtual void setCreateTime(double createTime_var);
    virtual unsigned int getDataSeq() const;
    virtual void setDataSeq(unsigned int dataSeq_var);
    virtual unsigned int getHop() const;
    virtual void setHop(unsigned int hop_var);
};

inline void doPacking(cCommBuffer *b, ATSStatisticMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATSStatisticMessage& obj) {obj.parsimUnpack(b);}


#endif // _ATSOVERLAY_M_H_
